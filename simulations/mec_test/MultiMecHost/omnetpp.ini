[General]
cmdenv-autoflush = true

##########################################################
#            Output Format Results                       #
##########################################################
num-rngs = 3
repeat = 1
seed-set = ${repetition}
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec
**.routingRecorder.enabled = false
**.scalar-recording = false
**.vector-recording = false



##########################################################
#            Simulation parameters                       #
##########################################################
debug-on-errors = false
print-undisposed = true

sim-time-limit = 38s
warmup-period = 10s

*.playgroundSizeX = 20000m
*.playgroundSizeY = 20000m
*.playgroundSizeZ = 50m
##########################################################
#            VeinsManager parameters                     #
##########################################################
#*.veinsManager.host = "localhost"       # if traci-launchd runs on localhost
##*.veinsManager.host = "sumo"       # traci-launchd on different host/container
#*.veinsManager.moduleType = "simu5g.nodes.cars.NRCar"
#*.veinsManager.moduleName = "car"
#*.veinsManager.launchConfig = xmldoc("heterogeneous.launchd.xml")
#*.veinsManager.updateInterval = 0.1s


*.veinsManager.moduleType = "car=simu5g.nodes.cars.NRCar *=simu5g.nodes.MobiEdgeSim.MMECHost"
*.veinsManager.moduleName = "car=car *=mmecHost"
*.veinsManager.moduleDisplayString= "car='i=device/pocketpc;is=vs' *='i=device/server2;is=vs'"
*.veinsManager.host = "localhost" 
*.veinsManager.updateInterval = 0.1s
*.veinsManager.launchConfig = xmldoc("heterogeneous.launchd.xml")


############### IPv4 configurator config #################
*.configurator.config = xmldoc("./demo.xml")


##########################################################
#              NR specific parameters                   #
##########################################################
*.gNodeB*.cellInfo.broadcastMessageInterval = 0.5s
**.fbPeriod = 40tti   # reports CQI every 40ms
**.amcType = "NRAmc"
**.pilotMode = "ROBUST_CQI"
**.targetBler = 0.01
**.blerShift = 5

# ----------------------------------------------------------------------------- #
# Config "SingleMec"
#
[Config SingleMec]
network = simu5g.simulations.NR.mec_test.MultiMecHost.MultiMecHost

#######################################################
#        CA and channel model configuration           #
#######################################################
*.carrierAggregation.numComponentCarriers = 1
*.carrierAggregation.componentCarrier[0].numBands =  25 #${numBands=25}

*.*.cellularNic.LteChannelModelType = "NRChannelModel"
*.gNodeB1.cellularNic.numCarriers = 1
*.gNodeB1.cellularNic.channelModel[0].componentCarrierModule = "carrierAggregation.componentCarrier[0]"
*.car[*].cellularNic.numCarriers = 1
*.car[*].cellularNic.nrChannelModel[0].componentCarrierModule = "carrierAggregation.componentCarrier[0]"


##########################################################
#          Mobile network specific parameters            #
##########################################################

# Number of Resource Blocks
**.numBands = 25

# Transmission Power
**.ueTxPower = 26dBm
**.eNodeBTxPower = 46dBm

# Enable dynamic association of UEs (based on best SINR)
*.car[*].cellularNic.nrPhy.dynamicCellAssociation = true
*.car[*].masterId = 0     # ignored if dynamic association is disabled
*.car[*].macCellId = 0    # ignored if dynamic association is disabled
*.car[*].nrMasterId = 1     # ignored if dynamic association is disabled
*.car[*].nrMacCellId = 1    # ignored if dynamic association is disabled

# eNodeB configuration
**.gNodeB1.macCellId = 1
**.gNodeB1.macNodeId = 1
**.gNodeB2.macCellId = 2
**.gNodeB2.macNodeId = 2


# Enable handover
*.car[*].cellularNic.nrPhy.enableHandover = true
*.gNodeB*.cellularNic.phy.enableHandover = true
*.gNodeB*.cellularNic.phy.handoverLatency = 50ms
*.gNodeB*.cellInfo.broadcastMessageInterval = 1s # eNB will sends broadcast triggers every second

# X2 and SCTP configuration
*.gNodeB*.numX2Apps = 1    # one x2App per peering eNodeB
*.gNodeB*.x2App[*].server.localPort = 5000 + ancestorIndex(1) # Server ports (x2App[0]=5000, x2App[1]=5001, ...)
*.gNodeB1.x2App[0].client.connectAddress = "gNodeB2%x2ppp0"
*.gNodeB2.x2App[0].client.connectAddress = "gNodeB1%x2ppp0"
**.sctp.nagleEnabled = false         # if true, transmission of small packets will be delayed on the X2
**.sctp.enableHeartbeats = false



# tcp settings
**.tcp.typename = "Tcp"
**.tcp.advertisedWindow = 65535         # in bytes, corresponds with the maximal receiver buffer capacity (Note: normally, NIC queues should be at least this size)
**.tcp.tcpAlgorithmClass = "TcpReno"    # TcpReno/TcpTahoe/TcpNewReno/TcpNoCongestionControl/DumbTcp
**.tcp.sackSupport = true               # Selective Acknowledgment (RFC 2018, 2883, 3517) support (header option) (SACK will be enabled for a connection if both endpoints support it)

##########################################################
#                    App Layer                           #
##########################################################

#########################_Car Side_#######################

#------------UEWarningAlertApp---------------
*.car[*].numApps = 2
*.car[*].app[0].typename = "DeviceApp"
*.car[*].app[0].localPort = 4500
*.car[*].app[0].UALCMPAddress = "ualcmp"
*.car[*].app[0].UALCMPPort = 1000
*.car[*].app[0].appPackageSource = "ApplicationDescriptors/WarningAlertApp.json"

*.car[*].app[1].typename = "UEWarningAlertApp"
*.car[*].app[1].deviceAppAddress = "car["+string(ancestorIndex(1))+"]"
*.car[*].app[1].deviceAppPort = 4500
*.car[*].app[1].startTime = 1s										#when sending start warning alert app									#period to sending messages
*.car[*].app[1].stopTime = 30s										#when sending stop MEC warning alert app

#----------------------------------------


############ MEC Configuration ############


# MEC Hosts
**.mecHost*.virtualisationInfrastructure.ipv4.forwarding = true
*.mecHost*.maxMECApps = 100					# max ME Apps to instantiate
*.mecHost*.maxRam = 32GB					# max KBytes of Ram
*.mecHost*.maxDisk = 100TB					# max KBytes of Disk Space
*.mecHost1.maxCpuSpeed = 400000		    	# max CPU
*.mecHost2.maxCpuSpeed = 500				# max CPU

*.mecHost*.bsList = ["gnb1", "gnb2"]

# MEC Services
# MEC host 1 services configurations
*.mecHost1.mecPlatform.numMecServices = 0
*.mecHost1.mecPlatform.mecService[0].typename = "LocationService"
*.mecHost1.mecPlatform.mecService[0].localAddress = "mecHost1.virtualisationInfrastructure"
*.mecHost1.mecPlatform.mecService[0].localPort = 10020
*.mecHost1.mecPlatform.serviceRegistry.localAddress = "mecHost1.virtualisationInfrastructure"
*.mecHost1.mecPlatform.serviceRegistry.localPort = 10021


# MEC host 2 services configurations
*.mecHost2.mecPlatform.numMecServices = 1
*.mecHost2.mecPlatform.mecService[0].typename = "LocationService"
*.mecHost2.mecPlatform.mecService[0].localAddress = "mecHost2.virtualisationInfrastructure"
*.mecHost2.mecPlatform.mecService[0].localPort = 10020
*.mecHost2.mecPlatform.serviceRegistry.localAddress = "mecHost2.virtualisationInfrastructure"
*.mecHost2.mecPlatform.serviceRegistry.localPort = 10021

# random number generators configuration
*.mecHost2.mecPlatform.serviceRegistry.rng-0 = 0 # request service time
*.mecHost2.mecPlatform.serviceRegistry.rng-1 = 1 # subscription service time
*.mecHost2.mecPlatform.mecService[0].rng-0 = 0 # request service time
*.mecHost2.mecPlatform.mecService[0].rng-1 = 1 # subscription service time
*.mecHost2.mecPlatform.mecService[0].requestServiceTime = 20us
*.mecHost2.mecPlatform.mecService[0].subscriptionServiceTime = 11us


# MEC host 2 services configurations
*.mmecHost[*].mecPlatform.numMecServices = 1
*.mmecHost[*].mecPlatform.mecService[0].typename = "LocationService"
*.mmecHost[*].mecPlatform.mecService[0].localAddress = "mecHost2.virtualisationInfrastructure"
*.mmecHost[*].mecPlatform.mecService[0].localPort = 10020
*.mmecHost[*].mecPlatform.serviceRegistry.localAddress = "mecHost2.virtualisationInfrastructure"
*.mmecHost[*].mecPlatform.serviceRegistry.localPort = 10021

# random number generators configuration
*.mmecHost[*].mecPlatform.serviceRegistry.rng-0 = 0 # request service time
*.mmecHost[*][*]ost2.mecPlatform.serviceRegistry.rng-1 = 1 # subscription service time
*.mmecHost[*].mecPlatform.mecService[0].rng-0 = 0 # request service time
*.mmecHost[*].mecPlatform.mecService[0].rng-1 = 1 # subscription service time
*.mmecHost[*].mecPlatform.mecService[0].requestServiceTime = 20us
*.mmecHost[*].mecPlatform.mecService[0].subscriptionServiceTime = 11us

# MEC Orchestrator configuration
*.mecOrchestrator.mecHostList = ["mecHost1", "mecHost2"]              # MEC hosts associated to the MEC system
*.mecOrchestrator.selectionPolicy = ${mecHostSelectionPolicy= "MecServiceBased", "MecHostBased", "AvailableResourcesBased"}
*.mecOrchestrator.mecHostIndex = 1
*.mecOrchestrator.mecApplicationPackageList = ["WarningAlertApp"]   # List of MEC app descriptors to be onboarded at
*.*mecHost*.mecPlatformManager.mecOrchestrator = "mecOrchestrator" # the MECPM needs to know the MEC orchestrator



